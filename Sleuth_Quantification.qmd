---
title: "Sleuth and Kallisto"
author: "Roberto Álvarez"
format: revealjs
editor: visual
#format:
 # html:
  #  toc: true
   # toc_float: true
  #pdf: default
  #docx: default
---


##  Sleuth from Kallisto

This tutorial will take you through a sample RNA-Seq analysis using [kallisto](https://pachterlab.github.io/kallisto/about), using an RNA-Seq R package [Sleuth](https://pachterlab.github.io/sleuth/about). This tutorial is based on the one by the [Pachter lab](https://pachterlab.github.io/sleuth_walkthroughs/boj/analysis.html)

## Paso 1: Cargar Sleuth y bibliotecas adicionales



```{r}
#| echo: true
library(sleuth)
library("gridExtra")
library("cowplot")
```


## BiomaRt


We will also use [biomaRt](https://bioconductor.org/packages/release/bioc/html/biomaRt.html) tools will allow us to pull in recognizable gene names from a database.


```{r echo=FALSE, message=FALSE, warning=FALSE}
#| echo: true
library("biomaRt")
```



## Paso 2:  Load experimental design and label kallisto outputs with metadata

### Locate sample names and describe our experimental design

We need to provide Sleuth with our sample names:

```{r}
#| echo: true
sample_id <- dir(file.path("01_Raw_Data/kallisto_quant_output/"))
sample_id
```


## Resultados

We also need to get the file paths to our results files.
```{r}
#| echo: true
kal_dirs <- file.path("01_Raw_Data/kallisto_quant_output/", sample_id)
```

## Nombre descriptivos

We also need a table that provides more meaningful names for describing our experiment...

```{r}
s2c <- read.table(file.path("01_Raw_Data/kallisto_demo.tsv"),
                  header = TRUE,
                  stringsAsFactors = FALSE,
                  sep = "\t")
s2c
```

## Tabla
We will add our file paths to the table

```{r}
s2c <- dplyr::mutate(s2c, path = kal_dirs)
```

Let's view the table we have created:
```{r}
s2c
```

## Tabla bonita

Let's view the table we have created:
```{r}
library(DT)
DT::datatable(s2c)
```


## Step 3: Load gene names from Ensembl

Next we need to determine which biomaRt to use. This can be a little complex so be sure to read their [documentation](https://www.bioconductor.org/packages/devel/bioc/vignettes/biomaRt/inst/doc/biomaRt.html). This [blog post](https://nsaunders.wordpress.com/2015/04/28/some-basics-of-biomart/) is also helpful.

```{r}
#| echo: true
marts <- listMarts()
marts
```

## Step 3: Load gene names from Ensembl

If you are not working with these Ensembl data bases you may want to check out documentation on [using BiomaRts other than Ensembl](https://bioconductor.org/packages/release/bioc/vignettes/biomaRt/inst/doc/biomaRt.html#using-a-biomart-other-than-ensembl). We are using plants, so...

```{r}
#| echo: true
marts <- listMarts(host = "plants.ensembl.org")
marts
```


## Step 3: Load gene names from Ensembl
For now, remember that we will want to use `plants_mart`.

Next, we need to choose a specific data set.

```{r}
#| echo: true
plants_mart <- useMart("plants_mart", host = "plants.ensembl.org" )
listDatasets(plants_mart)
```

## Seleccionamos Arabidopsis thaliana

After a little looking, its the `athaliana_eg_gene` data set that we need. Finally, we need to update our `plants_mart` to be more specific.

```{r}
#| echo: true
plants_mart <- useMart("plants_mart", dataset = "athaliana_eg_gene", host="plants.ensembl.org" )
```

Now we want to get specific attributes from the list of genes we can import from biomart

```{r}
#| echo: true
datatable(listAttributes(plants_mart))
```

## Seleccionamos características

We can choose whichever of these we'd like to use. Let's get transcript ids, gene ids, a description, and gene names. Notice, there are many things you may
want to come back for. We must get the transcript id because these are the names of the transcripts that were used in our Kallisto quantification.

```{r}
#| echo: true
plants_mart <- useMart("plants_mart", dataset = "athaliana_eg_gene", host="plants.ensembl.org" )
t2g <- getBM(attributes = c("ensembl_transcript_id",
                            "ensembl_gene_id",
                            "description",
                            "external_gene_name"),
             mart = plants_mart)
t2g
```

## Importante

We need to make sure the `ensembl_transcript_id` column is named `target_id`

```{r}
#| echo: true
ttg <- dplyr::rename(t2g, target_id= ensembl_transcript_id, ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
```


## Step 4: Prepare data for Sleuth

first we need to alter our experimental design so that we consider the full transcriptome sample to be the "control" to compare to...

```{r}
#| echo: true
s2c$genotype_variation_s <- as.factor(s2c$genotype_variation_s)
s2c$genotype_variation_s <- relevel(s2c$genotype_variation_s, ref = "wild type")

```

## Step 4: Prepare data for Sleuth

Now we need to tell Sleuth both about the Kallisto results and the gene names (and gene descriptions/metadata) we obtained from biomaRt. The `sleuth_prep` function does this.

```{r}
#| echo: true
# No corras esto si tu compu es muy lenta
#so <- sleuth_prep(s2c,
 #            full_model = ~genotype_variation_s,
  #           target_mapping = ttg,
   #          read_bootstrap_tpm=TRUE,
    #         extra_bootstrap_summary = TRUE)
#####
### saveRDS(so,file="03_Results/so.RDS")
## Mejor corre esta
readRDS(file="03_Results/so.RDS")
```



##Step 5: Initial data exploration

### Examine Sleuth PCA

Next, we should check to see if our samples (and replicates) cluster on a PCA (as should expect) or if there are outliers. When we plot by condition, we'd expect that similar colors group together.

```{r}
#| echo: true
library(cowplot)
so<-readRDS(file="03_Results/so.RDS")
ggplot2::theme_set(theme_cowplot())
plot_pca(so, color_by = 'genotype_variation_s', text_labels = TRUE)
```
## Versión interactiva

```{r}
#| echo: true
ggplot2::theme_set(theme_cowplot())
g<-plot_pca(so, color_by = 'genotype_variation_s', text_labels = TRUE)
library(plotly)
ggplotly(g)
```


## Gráfica por tratamiento 

Let's try plotting by treatment


```{r}
#| echo: true
plot_pca(so, color_by = 'treatment_s', text_labels = TRUE)
```

## Genes
We can also see genes involved in the the 1st PC by looking at the loadings (primary genes whose linear combinations define the principal components)


```{r}
#| echo: true
plot_loadings(so, pc_input = 1)
```


## El gen "influencer"

Let's see how this "influential" gene (at least as far as PCA tells us) looks by condition
```{r}
#| echo: true
plot_bootstrap(so, 'AT2G34420.1', color_by = 'genotype_variation_s')
```

## El gen "influencer"

Let's see how this "influential" gene (at least as far as PCA tells us) looks by treatment

```{r}
#| echo: true
plot_bootstrap(so, 'AT2G34420.1', color_by = 'treatment_s')
```


## Step 6: Modeling, testing, and results exploration

### Differential expression testing with Sleuth

Now we need to run a few functions that will test for differential expression (abundance).

First we will create a model

```{r include=FALSE, error=TRUE}
#No corras esto si tu máquina es muy lenta
#so2 <- sleuth_fit(so, ~genotype_variation_s, 'full')
#so2 <- sleuth_fit(so, ~1, 'reduced')
#so2 <- sleuth_lrt(so, 'reduced', 'full')
#saveRDS(so2,file="../03_Results/so2.RDS")
so2<-readRDS(file="03_Results/so2.RDS")
```


## Resultados


Now we can get the results of this analysis

```{r}
#| echo: true
full_results <- sleuth_results(so2, 'reduced:full', 'lrt',
                               show_all = FALSE)
library(DT)
datatable(head(full_results))

```


## Prueba de Wald

Let's add  Wald test
```{r}
#| echo: true
wald_test <- colnames(design_matrix(so2))[2]
so <- sleuth_wt(so2, wald_test)
```

